name: 'CD pong'
description: 'Triggered by a CI ping event to update dependencies and make a PR'
inputs:
  dependency:
    description: 'The used dependency'
    required: true
  tag:
    description: 'The pushed tag of the used dependency'
    required: true
  hash:
    description: 'The zig hash of the pushed tag of the used dependency'
    required: true
  token:
    description: 'The github token'
    required: true
runs:
  using: "composite"
  steps:
    - uses: tiawl/spaceporn-dep-action-env@v1

    - name: Setup git user information
      shell: ${{ env.shell }}
      env:
        BRANCH: ${{ env.bot_branch }}
        EMAIL: ${{ env.gh_bot_email }}
      run: |
        git config user.name "${{ env.gh_bot_name }}"
        git config user.email "${EMAIL}"
        git checkout -b "${BRANCH}"

    - name: Update workflows directory
      if: inputs.hash == ''
      shell: ${{ env.shell }}
      env:
        REPOSITORY: ${{ github.repository_owner }}/${{ inputs.dependency }}
        TAG: ${{ inputs.tag }}
      run: |
        find .github -type f -exec sed -i "s#uses:\s*${REPOSITORY}@.\+#uses: ${REPOSITORY}@${TAG}#g" {} +

    - name: Setup Zig
      if: inputs.hash != ''
      uses: goto-bus-stop/setup-zig@v2.2.0
      with:
        version: ${{ env.zig_version }}

    - name: Update the build.zig.zon
      if: inputs.hash != ''
      shell: ${{ env.shell }}
      env:
        URL: ${{ github.server_url }}/${{ github.repository_owner }}/${{ inputs.dependency }}/archive
        TAG: ${{ inputs.tag }}
        HASH: ${{ inputs.hash }}
      run: |
        zon_url="$(grep -o "${URL}/.*\.tar\.gz" build.zig.zon)"
        zon_hash="$(zig fetch "${zon_url}")"
        sed -i "s@${zon_url}@${URL}/refs/tags/${TAG}.tar.gz@;
                s@${zon_hash}@${HASH}@" build.zig.zon

    - name: Diff
      id: diff
      shell: ${{ env.shell }}
      run: |
        diffs="$(git diff HEAD --name-only | wc -l)"
        printf 'len=%s\n' "${diffs}" >> "${GITHUB_OUTPUT}"

    - name: Create Pull Request
      if: steps.diff.outputs.len != '0'
      env:
        BRANCH: ${{ env.bot_branch }}
        DEFAULT: ${{ env.default_branch }}
        GH_TOKEN: ${{ inputs.token }}
        TITLE: ${{ env.gh_bot_pr_title }}
      shell: ${{ env.shell }}
      run: |
        git add -A
        git commit -m "CD: ${TITLE}"
        git push --force --set-upstream origin "${BRANCH}"
        gh pr create --base "${DEFAULT}" --fill --reviewer "${GITHUB_REPOSITORY_OWNER}"
